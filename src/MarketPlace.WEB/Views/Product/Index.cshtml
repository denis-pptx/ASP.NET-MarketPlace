@model ProductListViewModel
@inject ICartService cartService
@inject IProductService productService
@{
    ViewData["Title"] = "Товары";

    string IsChecked(SelectListItem item)
    {
        if (Model.SelectedCategories.Any(sli => sli.Value == item.Value))
        {
            return "checked";
        }
        return "";
    }

    var cart = (await cartService.GetAsync(User.Identity!.Name!)).Data ?? new();
    SelectList categories = productService.GetCategories().Data!;
}


<style>
    .card-img-top {
        height: 200px;
        object-fit: contain;
    }
</style>

<h2>@ViewData["Title"]</h2>
<hr />

<div class="row mb-3">
    <div class="col-md-12">
        <form method="get" asp-controller="Product" asp-action="Index">

            <div class="input-group mb-3" id="search-group">
                <input type="text" class="form-control" placeholder="Поиск" name="searchString" value="@Model.SearchString">
                <button class="btn btn-outline-danger" type="button" id="search-clear">
                    <i class="fa fa-times"></i>
                </button>
                <button class="btn btn-outline-primary" type="submit">Найти</button>
            </div>

            <div class="row">
                @foreach (var category in categories)
                {
                    <div class="col-md-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" name="categories" value="@category.Value" id="@category.Text" @IsChecked(category)>
                            <label class="form-check-label" for="@category.Text">@category.Text</label>
                        </div>
                    </div>
                }
            </div>
            <button class="btn btn-outline-danger mt-2" type="button" id="clear-categories">Сбросить</button>
        </form>
    </div>
</div>

<div class="row">
    @foreach (var product in Model.Products)
    {
        <div class="col-md-4">
            <div class="card mb-4">
                
                @if (product.Photo != null && product.Photo.Length > 0)
                {
                    <img src="@($"data:image/jpeg;base64,{Convert.ToBase64String(product.Photo)}")" class="card-img-top mx-auto mt-4 w-50" />
                }
                else
                {
                    <img src="/images/NoPhoto.png" class="card-img-top mx-auto mt-4 w-50" />
                }
              

                <div class="card-body">
                    <h5 class="card-title">@product.Name</h5>
                    <h6 class="card-subtitle text-muted">@product.Category.GetDisplayName()</h6>
                    <div class="d-flex justify-content-between mt-2">
                        <div class="btn-group btn-group">
                            <a class="btn btn-outline-primary" asp-controller="Product" asp-action="Details" asp-route-id="@product.Id">Детали</a>

                            @if (!User.Identity.IsAuthenticated || User.IsInRole(MarketPlace.DAL.Enum.Role.Customer.ToString()))
                            {
                                @if (cart.Items.Any(i => i.ProductId == product.Id))
                                {
                                    <button type="button" class="btn btn-outline-primary remove-from-cart" data-product-id="@product.Id">
                                        <i class="fa-solid fa-check"></i>
                                    </button>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-outline-primary add-to-cart" data-product-id="@product.Id">
                                        <i class="fa-solid fa-cart-shopping"></i>
                                    </button>
                                }
                            }
                        </div>

                        <h5>@product.Price р.</h5>
                    </div>
                </div>
            </div>
        </div>
    }
</div>



@await Html.PartialAsync("_Unauthorized")

@section Scripts {
    <script>
        $(document).ready(function () {
            $("#search-clear").click(function () {
                $("#search-group").find("input[type=text]").val("");
            });
        });
    </script>

    <script>
        $(document).ready(function () {
            $("#clear-categories").click(function () {
                $("input[type=checkbox][name=categories]").prop("checked", false);
            });
        });

    </script>


    <script>
        $(document).on('click', '.add-to-cart', function () {
            var isAuthenticated = @(User.Identity!.IsAuthenticated ? "true" : "false");

            if (!isAuthenticated) {
                $('#unauthorized-modal .modal-body p').text('Для добавления в корзину необходимо авторизоваться.');
                $('#unauthorized-modal').modal('show');
            } else {
                var button = $(this);
                var productId = button.data('product-id');
                var url = '@Url.Action("Add", "Cart", new { area = "Customer" })';
                $.ajax({
                    url: url,
                    type: 'POST',
                    data: { productId: productId },
                    success: function () {
                        button.removeClass('add-to-cart').addClass('remove-from-cart');
                        button.find('i').removeClass('fa-cart-shopping').addClass('fa-check');
                        showToast('success', 'Товар добавлен в корзину');
                    },
                    error: function (jqXHR) {
                        showToast('error', jqXHR.status + ': ' + jqXHR.responseText);
                    }
                });
            }
        });

        $(document).on('click', '.remove-from-cart', function () {
            var isAuthenticated = @(User.Identity!.IsAuthenticated ? "true" : "false");

            if (!isAuthenticated) {
                $('#unauthorized-modal .modal-body p').text('Для добавления в корзину необходимо авторизоваться.');
                $('#unauthorized-modal').modal('show');
            } else {
                var button = $(this);
                var productId = button.data('product-id');
                var url = '@Url.Action("Remove", "Cart", new { area = "Customer" })';
                $.ajax({
                    url: url,
                    type: 'POST',
                    data: { productId: productId },
                    success: function () {
                        button.removeClass('remove-from-cart').addClass('add-to-cart');
                        button.find('i').removeClass('fa-check').addClass('fa-cart-shopping');
                        showToast('success', 'Товар удален из корзины');
                    },
                    error: function (jqXHR) {
                        showToast('error', jqXHR.status + ': ' + jqXHR.responseText);
                    }
                });
            }
        });



    </script>
}
