@model Product
@inject ICartService cartService

@{
    ViewData["Title"] = "Детали";

    var cart = (await cartService.GetAsync(User.Identity!.Name!)).Data ?? new();

}


<div class="card mt-4">
    <div class="row g-0">
        <div class="col-md-3">
            @if (Model.Photo != null && Model.Photo.Length > 0)
            {
                <img src="@($"data:image/jpeg;base64,{Convert.ToBase64String(Model.Photo)}")" class="card-img" />
            }
            else
            {
                <img src="@("/images/NoPhoto.png")" class="card-img" style="padding: 5%;" />
            }
        </div>
        <div class="col-md-9">
            <div class="card-body">
                <h5 class="card-title">@Model.Name</h5>
                <h6 class="card-subtitle text-muted">@Model.Category.GetDisplayName()</h6>

                <p class="card-text mt-2">@Model.Description</p>
                <h6 class="card-subtitle">Цена: @Model.Price р.</h6>

                <div class="btn-group btn-group mt-3">
                    <a asp-controller="Product" asp-action="Index" class="btn btn-outline-primary">К списку товаров</a>

                    @if (!User.Identity.IsAuthenticated || User.IsInRole(MarketPlace.DAL.Enum.Role.Customer.ToString()))
                    {
                        @if (cart.Items.Any(i => i.ProductId == Model.Id))
                        {
                            <button type="button" class="btn btn-outline-primary remove-from-cart" data-product-id="@Model.Id">
                                <i class="fa-solid fa-check"></i>
                            </button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-outline-primary add-to-cart" data-product-id="@Model.Id">
                                <i class="fa-solid fa-cart-shopping"></i>
                            </button>
                        }
                    }
            </div>
        </div>
    </div>
</div>


@await Html.PartialAsync("_Unauthorized")

@section Scripts {
    <script>
        $(document).on('click', '.add-to-cart', function () {
            var isAuthenticated = @(User.Identity!.IsAuthenticated ? "true" : "false");

            if (!isAuthenticated) {
                $('#unauthorized-modal .modal-body p').text('Для добавления в корзину необходимо авторизоваться.');
                $('#unauthorized-modal').modal('show');
            } else {
                var button = $(this);
                var productId = button.data('product-id');
                var url = '@Url.Action("Add", "Cart", new { area = "Customer" })';
                $.ajax({
                    url: url,
                    type: 'POST',
                    data: { productId: productId },
                    success: function () {
                        button.removeClass('add-to-cart').addClass('remove-from-cart');
                        button.find('i').removeClass('fa-cart-shopping').addClass('fa-check');
                        showToast('success', 'Товар добавлен в корзину');
                    },
                    error: function (jqXHR) {
                        showToast('error', jqXHR.status + ': ' + jqXHR.responseText);
                    }
                });
            }
        });

        $(document).on('click', '.remove-from-cart', function () {
            var isAuthenticated = @(User.Identity!.IsAuthenticated ? "true" : "false");

            if (!isAuthenticated) {
                $('#unauthorized-modal .modal-body p').text('Для добавления в корзину необходимо авторизоваться.');
                $('#unauthorized-modal').modal('show');
            } else {
                var button = $(this);
                var productId = button.data('product-id');
                var url = '@Url.Action("Remove", "Cart", new { area = "Customer" })';
                $.ajax({
                    url: url,
                    type: 'POST',
                    data: { productId: productId },
                    success: function () {
                        button.removeClass('remove-from-cart').addClass('add-to-cart');
                        button.find('i').removeClass('fa-check').addClass('fa-cart-shopping');
                        showToast('success', 'Товар удален из корзины');
                    },
                    error: function (jqXHR) {
                        showToast('error', jqXHR.status + ': ' + jqXHR.responseText);
                    }
                });
            }
        });



    </script>
}






