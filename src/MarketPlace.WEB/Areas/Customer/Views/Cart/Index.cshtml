@model Cart
@inject IShopService shopService

@{
    ViewData["Title"] = "Корзина";
}

<h2 class="d-flex align-items-center justify-content-between">
    @ViewData["Title"]
    <button class="btn btn-outline-primary d-none" id="buy-button">Купить выбранное</button>
</h2>
<hr />

<style>
    .cart-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .cart-image {
        width: 30%;
        transform: translateX(-11%);
    }


    .card-checkbox {
        position: absolute;
        top: 0;
        right: 0;
        z-index: 1;
        padding-top: 10px;
        padding-right: 15px;
    }

    .card-checkbox input[type="checkbox"] {
        transform: scale(1.5);
        transition: transform 0.15s ease;
    }

    .card-checkbox input[type="checkbox"]:hover {
        transform: scale(1.8);
    }

    .out-of-stock {
        opacity: 0.6;
    }

</style>

@if (Model.Items.Count == 0)
{
    <div class="text-center cart-container">
        <img src="/images/Cart.png" class="cart-image" />
        <a asp-area="" asp-controller="Home" asp-action="Index" class="btn btn-outline-secondary">Перейти к товарам</a>
    </div>
}
else
{
    <div class="row">
        <div class="col-md-12">
            <form id="buy-form" method="post" asp-area="Customer" asp-controller="OrderPreview" asp-action="Index">
                @foreach (var item in Model.Items)
                {
                    bool isOutOfStock = item.Product!.Quantity == 0;

                    <div class="card @(Model.Items.IndexOf(item) == 0 ? "" : "mt-4") @(isOutOfStock ? "out-of-stock" : "")">
                        <div class="card-checkbox">
                            <input class="form-check-input" type="checkbox" name="cartItemsIds" @(isOutOfStock ? "disabled" : "")
                           value="@item.Id" id="checkbox_@item.Id">
                        </div>

                        <div class="row g-0">
                            <div class="col-md-3">
                                @if (item.Product!.Photo != null && item.Product.Photo.Length > 0)
                                {
                                    <img src="@($"data:image/jpeg;base64,{Convert.ToBase64String(item.Product!.Photo)}")" class="card-img" />
                                }
                                else
                                {
                                    <img src="@("/images/NoPhoto.png")" class="card-img" style="padding: 5%;" />
                                }
                            </div>
                            <div class="col-md-9">
                                <div class="card-body">
                                    <h5 class="card-title">@item.Product.Name</h5>
                                    <h6 class="card-subtitle text-muted">@item.Product.Category.GetDisplayName()</h6>
                                    <h6 class="card-subtitle text-muted mt-1">Магазин: @((await shopService.GetByIdAsync(item.Product.ShopId)).Data.Name)</h6>

                                    <p class="card-text mt-2" style="white-space: pre-wrap">@item.Product.Description</p>

                                    <h6 class="card-subtitle">Цена: @item.Product.Price р.</h6>

                                    <div class="col-3">
                                        <div class="input-group mt-3">
                                            @if (isOutOfStock == true)
                                            {
                                                <span class="input-group-text">Нет в наличии</span>
                                            }
                                            else
                                            {
                                                <label class="input-group-text" for="inputQuantity_@(item.Id)">Количество</label>
                                                <input type="number" class="form-control quantity-input" value="@item.Quantity" min="1" max="@item.Product.Quantity" id="inputQuantity_@(item.Id)">
                                            }
                                        </div>
                                    </div>

                                    <div class="mt-3">
                                        <input type="button" class="btn btn-outline-danger remove-from-cart" data-product-id="@item.ProductId" value="Удалить из корзины" />
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                }
            </form>
        </div>
    </div>
}

@await Html.PartialAsync("_Unauthorized")

@section Scripts {
    <script>
        $(document).on('click', '.remove-from-cart', function () {
            var isAuthenticated = @(User.Identity!.IsAuthenticated ? "true" : "false");

            if (!isAuthenticated) {
                $('#unauthorized-modal .modal-body p').text('Для удаления из корзизны необходимо авторизоваться.');
                $('#unauthorized-modal').modal('show');
            } else {
                var button = $(this);
                var productId = button.data('product-id');
                var url = '@Url.Action("Remove", "Cart", new { area = "Customer" })';
                $.ajax({
                    url: url,
                    type: 'POST',
                    data: { productId: productId },
                    success: function () {
                        window.location.href = '@Url.Action("Index", "Cart", new { area = "Customer" })';
                    },
                    error: function (jqXHR) {
                        showToast('error', jqXHR.status + ': ' + jqXHR.responseText);
                    }
                });
            }
        });
    </script>


    <script>
        function updateBuyButtonVisibility() {
            var selectedCount = $('.card-checkbox input[type="checkbox"]:checked').length;

            if (selectedCount > 0) {
                $('#buy-button').removeClass('d-none');
            } else {
                $('#buy-button').addClass('d-none');
            }
        }

        $(document).ready(function () {
            $('.card-checkbox input[type="checkbox"]').on('change', function () {
                updateBuyButtonVisibility();
            });

            updateBuyButtonVisibility(); // Вызов функции при загрузке страницы

            $(window).on('pageshow', function () {
                updateBuyButtonVisibility(); // Вызов функции при каждом показе страницы
            });
        });
    </script>



    <script>
        $('#buy-button').on('click', function () {
            $('#buy-form').submit();
        });
    </script>


    <script>
        $(document).ready(function () {
            $('.quantity-input').on('change', function () {
                var input = $(this);
                var productId = input.closest('.card').find('.remove-from-cart').data('product-id');
                var quantity = parseInt(input.val());
                var maxQuantity = parseInt(input.attr('max'));

                if (isNaN(quantity) || quantity < 1) {
                    input.val(1);
                    quantity = 1;
                } else if (quantity > maxQuantity) {
                    input.val(maxQuantity);
                    quantity = maxQuantity;
                }

                updateQuantity(productId, quantity);
            });
        });

        function updateQuantity(productId, quantity) {
            var url = '@Url.Action("UpdateQuantity", "Cart", new { area = "Customer" })';
            $.ajax({
                url: url,
                type: 'POST',
                data: { productId: productId, quantity: quantity },
                success: function () {
                    // Обработка успешного обновления количества
                },
                error: function (jqXHR) {
                    showToast('error', jqXHR.status + ': ' + jqXHR.responseText);
                }
            });
        }
    </script>
}